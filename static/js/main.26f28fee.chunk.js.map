{"version":3,"sources":["Pokemones/Pokemone.js","preloader.gif","Pokemones/Pokemones.js","App.js","reportWebVitals.js","index.js"],"names":["useMaterialStylesCard","makeStyles","root","maxWidth","width","media","height","Pokemone","pkmn","materialClassesCard","useState","cardIsHover","setCardIsHover","Grid","item","xmlHttp","XMLHttpRequest","open","name","send","pokemon","JSON","parse","responseText","pokemonTypesStr","types","map","type","Chip","size","color","label","chartData","labels","stats","stat","datasets","data","base_stat","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","Card","className","onClick","onMouseOver","onMouseOut","CardActionArea","CardContent","Typography","gutterBottom","variant","component","container","justify","alignItems","spacing","CardMedia","image","id","title","getCard","Pokemones","search","pokemones","setPokemones","paginationDelta","setPaginationDelta","setPagination","currentPage","setCurrentPage","tags","setTags","preloader","setPreloader","localStorage","getItem","setItem","stringify","isPreloaderRun","preloaderRun","setInterval","loadPokemonesList","length","filteredPokemonesByTags","tagIndx","indx","push","Math","ceil","results","useEffect","typesFromAPI","allTags","typeIndx","loadAllTagsAPI","alt","src","preloaderImg","Box","m","direction","Pagination","defaultPage","count","onChange","event","page","tagStr","onDelete","newSelectedTags","filter","tag","delTagFromSelected","ButtonGroup","Button","slice","align","includes","useMaterialStylesAppBar","theme","flexGrow","display","breakpoints","up","position","borderRadius","shape","fade","palette","common","white","marginLeft","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","App","materialClassesAppBar","setSearch","AppBar","Toolbar","noWrap","InputBase","classes","input","placeholder","value","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26f28fee.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Card, CardActionArea, CardContent, CardMedia, Chip, Grid, makeStyles, Typography} from \"@material-ui/core\";\nimport {Router, Link} from \"react-router-dom\";\nimport {Radar} from \"react-chartjs-2\";\n\nconst useMaterialStylesCard = makeStyles({\n    root: {\n        maxWidth: 345,\n        width: 300\n    },\n    media: {\n        height: 300,\n    },\n});\n\nfunction Pokemone({pkmn}) {\n    const materialClassesCard = useMaterialStylesCard();\n    const [cardIsHover, setCardIsHover] = useState(false)\n\n    const getCard = () => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open(\"GET\", 'https://pokeapi.co/api/v2/pokemon/' + pkmn.name, false)\n        xmlHttp.send(null)\n\n        let pokemon = JSON.parse(xmlHttp.responseText)\n\n        let pokemonTypes = pokemon.types\n        let pokemonTypesStr = pokemonTypes.map((type) => {\n            return (<Grid item><Chip size={'small'} color={'primary'} label={type.type.name}/></Grid>)\n        })\n\n        if (cardIsHover) {\n            const chartData = {\n                labels: [\n                    pokemon.stats[0].stat.name,\n                    pokemon.stats[1].stat.name,\n                    pokemon.stats[2].stat.name,\n                    pokemon.stats[3].stat.name,\n                    pokemon.stats[4].stat.name,\n                    pokemon.stats[5].stat.name\n                ],\n                datasets: [{\n                    label: pokemon.name,\n                    data: [pokemon.stats[0].base_stat,\n                        pokemon.stats[1].base_stat,\n                        pokemon.stats[2].base_stat,\n                        pokemon.stats[3].base_stat,\n                        pokemon.stats[4].base_stat,\n                        pokemon.stats[5].base_stat],\n                    fill: true,\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: 'rgb(255, 99, 132)',\n                    pointBorderColor: '#fff',\n                    pointHoverBackgroundColor: '#fff',\n                    pointHoverBorderColor: 'rgb(255, 99, 132)'\n                }]\n            }\n\n            return (\n                <Card className={materialClassesCard.root} onClick={()=>{setCardIsHover(!cardIsHover)}} onMouseOver={()=>{setCardIsHover(true)}} onMouseOut={()=>{setCardIsHover(false)}}>\n                    <CardActionArea>\n                        <Radar data={chartData} type=\"undefined\"/>\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {pokemon.name}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                <Grid container\n                                      justify=\"flex-start\"\n                                      alignItems=\"baseline\"\n                                      spacing={1}>\n                                    Type: {pokemonTypesStr}\n                                </Grid>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            )\n        } else {\n            return (\n                <Card className={materialClassesCard.root} onClick={()=>{setCardIsHover(!cardIsHover)}} onMouseOver={()=>{setCardIsHover(true)}} onMouseOut={()=>{setCardIsHover(false)}}>\n                    <CardActionArea>\n                            <CardMedia\n                                className={materialClassesCard.media}\n                                image={\"https://pokeres.bastionbot.org/images/pokemon/\" + pokemon.id + \".png\"}\n                                title={pokemon.name}\n                            />\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {pkmn.name}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                <Grid container\n                                      justify=\"flex-start\"\n                                      alignItems=\"baseline\"\n                                      spacing={1}>\n                                    Type: {pokemonTypesStr}\n                                </Grid>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            )\n        }\n    }\n\n    return(\n        <Grid item>\n            {getCard()}\n        </Grid>\n    );\n}\n\nexport default Pokemone","export default __webpack_public_path__ + \"static/media/preloader.5d2a87c1.gif\";","import React, {useEffect, useState} from \"react\";\nimport Pokemone from \"./Pokemone\";\nimport {Button, ButtonGroup, Chip, Grid, Typography} from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\nimport {Pagination} from \"@material-ui/lab\";\nimport '../preloader.css';\nimport preloaderImg from '../preloader.gif';\n\nfunction Pokemones({search}) {\n    const [pokemones, setPokemones] = useState([])\n    const [paginationDelta, setPaginationDelta] = useState(10) // Max: 50\n    const [pagination, setPagination] = useState(0)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [tags, setTags] = useState([])\n    const [preloader, setPreloader] = useState('hidden-preloader')\n\n    if (localStorage.getItem('selectedTags')===null) {\n        localStorage.setItem('selectedTags', JSON.stringify([]))\n    }\n\n    // Функція відповідає за стан прелоадера, приймає або 1 або 0\n    const isPreloaderRun = (preloaderRun) => {\n        if (preloaderRun) {\n            setPreloader('show-preloader')\n        } else {\n            setPreloader('hide-preloader')\n            setInterval(()=>{setPreloader('hidden-preloader')}, 990)\n        }\n    }\n\n    // Завантажуємо всі можливі теги\n    const loadAllTagsAPI = () => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/', false )\n        xmlHttp.send( null )\n\n        let typesFromAPI = JSON.parse(xmlHttp.responseText).results\n        let allTags = []\n        for (let typeIndx=0; typeIndx<typesFromAPI.length; typeIndx++) {\n            allTags.push(typesFromAPI[typeIndx].name)\n        }\n\n        setTags(allTags)\n    }\n\n    // Додаємо вибраний тег сховище\n    const addTagToSelected = (tagIndx) => {\n        isPreloaderRun(true)\n\n        if (! JSON.parse(localStorage.getItem('selectedTags')).includes(tags[tagIndx])) {\n            if (JSON.parse(localStorage.getItem('selectedTags')).length>0) {\n                localStorage.setItem('selectedTags', JSON.stringify([...JSON.parse(localStorage.getItem('selectedTags')), tags[tagIndx]]))\n            } else {\n                localStorage.setItem('selectedTags', JSON.stringify([tags[tagIndx]]))\n            }\n            loadPokemonesList()\n        }\n    }\n\n    // Видаляємо вибраний тег з сховища\n    const delTagFromSelected = (tagStr) => {\n        isPreloaderRun(true)\n\n        let newSelectedTags = JSON.parse(localStorage.getItem('selectedTags')).filter((tag)=>{return(tag!==tagStr)})\n        localStorage.setItem('selectedTags', JSON.stringify(newSelectedTags))\n        loadPokemonesList()\n    }\n\n    // Завантажуємо або всіх покемонів, або сортуючи по тегам\n    // Кількість всіх покемонів 1118 штук\n    const loadPokemonesList = () => {\n        let selectedTagsFromCookies = localStorage.getItem('selectedTags')\n\n        if (selectedTagsFromCookies===null) {\n            localStorage.setItem('selectedTags', JSON.stringify([]))\n        }\n\n        if (JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            let filteredPokemonesByTags = []\n\n            for (let tagIndx=0; tagIndx<JSON.parse(localStorage.getItem('selectedTags')).length; tagIndx++) {\n                let xmlHttp = new XMLHttpRequest()\n                xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/' + JSON.parse(localStorage.getItem('selectedTags'))[tagIndx], false )\n                xmlHttp.send( null )\n                let typePokemones = JSON.parse(xmlHttp.responseText).pokemon\n\n                typePokemones.map((pokemon, indx)=>{\n                    if (pokemon in filteredPokemonesByTags) {\n\n                    } else {\n                        filteredPokemonesByTags.push(pokemon.pokemon)\n                    }\n                })\n            }\n\n            setPokemones(filteredPokemonesByTags)\n            setPagination(Math.ceil(filteredPokemonesByTags.length/paginationDelta))\n        } else {\n            let xmlHttp = new XMLHttpRequest()\n            xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon?limit=1118&offset=0', false ) // Обовязково синхронно\n            xmlHttp.send( null )\n            setPokemones(JSON.parse(xmlHttp.responseText).results)\n            setPagination(Math.ceil(Math.ceil(pokemones.length/paginationDelta)))\n        }\n\n        isPreloaderRun(false)\n    }\n\n    // Формуємо список покемонів\n    const formatPokemonesJSX = () => {\n        if (pokemones.length===0 && JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            return(<Box m={4}><Typography variant='h3'>Not Found</Typography></Box>)\n        } else {\n            return(\n                pokemones.map((pkmn, indx)=>{\n                    if (search===''){\n                        if (indx < paginationDelta*currentPage && indx > paginationDelta*currentPage-paginationDelta-1) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    } else {\n                        if (pkmn.name.slice(0,search.length)===search) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    }\n                })\n            )\n        }\n    }\n\n    // Запускається один раз при першому завантаженні\n    useEffect(()=>{\n        loadPokemonesList()\n        loadAllTagsAPI()\n    }, [])\n\n    return(\n        <div id=\"body\">\n            <div id=\"preloader\" className={preloader}>\n                <img alt=\"preloader\" src={preloaderImg}/>\n            </div>\n\n            <Box m={3} id=\"paginator\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <Pagination defaultPage={1}\n                                count={Math.ceil(pokemones.length / paginationDelta)}\n                                onChange={(event, page) => {setCurrentPage(page)}}/>\n                </Grid>}\n            </Box>\n\n            <Box m={2} id=\"selected-tags\">\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      spacing={2}\n                      alignItems=\"flex-start\">\n                    {JSON.parse(localStorage.getItem('selectedTags')).map((tagStr)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} color={'secondary'} label={tagStr} onDelete={()=>{\n                                delTagFromSelected(tagStr)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"paginator-delta\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <ButtonGroup color=\"secondary\" aria-label=\"outlined secondary button group\">\n                        <Button onClick={()=>{setPaginationDelta(10)}}>10</Button>\n                        <Button onClick={()=>{setPaginationDelta(20)}}>20</Button>\n                        <Button onClick={()=>{setPaginationDelta(30)}}>30</Button>\n                        <Button onClick={()=>{setPaginationDelta(50)}}>50</Button>\n                        <Button onClick={()=>{setPaginationDelta(100)}}>100</Button>\n                    </ButtonGroup>\n                </Grid>}\n            </Box>\n\n            <Box m={3} id=\"pokemones\">\n                <Grid container\n                      spacing={2}\n                      justify=\"space-evenly\">\n                    {formatPokemonesJSX()}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"all-tags\">\n                <Box m={3}><Typography align=\"center\" variant={'h4'}>All tags</Typography></Box>\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      spacing={3}\n                      alignItems=\"flex-start\">\n                    {tags.map((tag,indx)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} label={tag} onClick={(event)=>{\n                                addTagToSelected(indx)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n        </div>\n    )\n}\n\nexport default Pokemones","import './App.css';\nimport './preloader.css';\nimport {AppBar, fade, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pokemones from \"./Pokemones/Pokemones\";\nimport {useState} from \"react\";\n\nconst useMaterialStylesAppBar = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nfunction App() {\n    const materialClassesAppBar = useMaterialStylesAppBar();\n\n    const [search, setSearch] = useState('')\n\n    return (\n        <>\n            <AppBar color=\"primary\" position=\"static\" className={materialClassesAppBar.root}>\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap className={materialClassesAppBar.title}>pokemonex</Typography>\n                    <div className={materialClassesAppBar.search}>\n                        <div className={materialClassesAppBar.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            classes={{\n                                root: materialClassesAppBar.inputRoot,\n                                input: materialClassesAppBar.inputInput\n                            }}\n                            placeholder=\"Search…\"\n                            value={search}\n                            onChange={(event)=>{setSearch(event.target.value)}}\n                        />\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <Pokemones search={search}/>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
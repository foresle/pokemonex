{"version":3,"sources":["Pokemones/Pokemone.js","preloader.gif","Pokemones/Pokemones.js","PokemoneInfo/PokemoneInfo.js","App.js","reportWebVitals.js","index.js"],"names":["useMaterialStylesCard","makeStyles","root","maxWidth","width","media","height","Pokemone","pkmn","materialClassesCard","Grid","item","to","name","style","textDecoration","Card","className","CardActionArea","CardMedia","image","url","slice","title","CardContent","Typography","gutterBottom","variant","component","color","container","justify","alignItems","spacing","pkmnName","xmlHttp","XMLHttpRequest","open","send","JSON","parse","responseText","types","map","type","typeIndx","Chip","size","label","getTypes","Pokemones","search","useState","pokemones","setPokemones","paginationDelta","setPaginationDelta","setPagination","currentPage","setCurrentPage","tags","setTags","preloader","setPreloader","localStorage","getItem","setItem","stringify","isPreloaderRun","preloaderRun","setInterval","loadPokemonesList","length","filteredPokemonesByTags","tagIndx","pokemon","indx","push","Math","ceil","results","useEffect","typesFromAPI","allTags","loadAllTagsAPI","id","alt","src","preloaderImg","Box","m","direction","Pagination","defaultPage","count","onChange","event","page","tagStr","onDelete","newSelectedTags","filter","tag","delTagFromSelected","ButtonGroup","Button","onClick","align","includes","useStyles","PokemonesInfo","pokemonName","useParams","chartData","labels","stats","stat","datasets","data","base_stat","fill","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","p","Paper","weight","getPokemon","useMaterialStylesAppBar","theme","flexGrow","display","breakpoints","up","position","borderRadius","shape","fade","palette","common","white","marginLeft","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","App","materialClassesAppBar","setSearch","AppBar","Toolbar","noWrap","InputBase","classes","input","placeholder","value","target","path","PokemoneInfo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2XAIMA,EAAwBC,YAAW,CACrCC,KAAM,CACFC,SAAU,IACVC,MAAO,KAEXC,MAAO,CACHC,OAAQ,OAqDDC,MAjDf,YAA2B,IAARC,EAAO,EAAPA,KACTC,EAAsBT,IAkB5B,OACI,cAACU,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAAC,IAAD,CAAMC,GAAI,YAAYJ,EAAKK,KAAMC,MAAO,CAACC,eAAgB,QAAzD,SACI,cAACC,EAAA,EAAD,CAAMC,UAAWR,EAAoBP,KAArC,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIF,UAAWR,EAAoBJ,MAC/Be,MAAO,iDAAmDZ,EAAKa,IAAIC,MAAM,IAAIA,MAAM,GAAG,GAAK,OAC3FC,MAAOf,EAAKK,OAEhB,eAACW,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAhD,SACKpB,EAAKK,OAEV,cAACY,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,IAA5D,SACI,eAAClB,EAAA,EAAD,CAAMoB,WAAS,EACTC,QAAQ,aACRC,WAAW,WACXC,QAAS,EAHf,mBA/BX,SAACC,GACd,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,qCAAuCH,GAAU,GACrEC,EAAQG,KAAK,MAQb,OANgBC,KAAKC,MAAML,EAAQM,cAAcC,MAE5BC,KAAI,SAACC,EAAMC,GAC5B,OAAQ,cAACnC,EAAA,EAAD,CAAMC,MAAI,EAAV,SAAW,cAACmC,EAAA,EAAD,CAAMC,KAAM,QAASlB,MAAO,UAAWmB,MAAOJ,EAAKA,KAAK/B,YA2B5CoC,CAASzC,EAAKK,wB,oCCpD1C,MAA0B,sCCyN1BqC,MAjNf,YAA8B,IAAVC,EAAS,EAATA,OAChB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAmBK,GAAnB,WACA,EAAsCL,mBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAwBP,mBAAS,IAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KACA,EAAkCT,mBAAS,oBAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KAE2C,OAAvCC,aAAaC,QAAQ,iBACrBD,aAAaE,QAAQ,eAAgB3B,KAAK4B,UAAU,KAIxD,IAAMC,EAAiB,SAACC,GAChBA,EACAN,EAAa,mBAEbA,EAAa,kBACbO,aAAY,WAAKP,EAAa,sBAAsB,OA4CtDQ,EAAoB,WAOtB,GAJ8B,OAFAP,aAAaC,QAAQ,iBAG/CD,aAAaE,QAAQ,eAAgB3B,KAAK4B,UAAU,KAGM,IAA1D5B,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBO,QAAa,WAG9D,IAFA,IAAIC,EAA0B,GAErBC,EAAQ,EAAGA,EAAQnC,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBO,OAAQE,IAAW,CAC5F,IAAIvC,EAAU,IAAIC,eAClBD,EAAQE,KAAM,MAAO,kCAAoCE,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBS,IAAU,GACpHvC,EAAQG,KAAM,MACMC,KAAKC,MAAML,EAAQM,cAAckC,QAEvChC,KAAI,SAACgC,EAASC,GACpBD,KAAWF,GAGXA,EAAwBI,KAAKF,EAAQA,YAKjDrB,EAAamB,GACbhB,EAAcqB,KAAKC,KAAKN,EAAwBD,OAAOjB,IAnBO,OAoB3D,CACH,IAAIpB,EAAU,IAAIC,eAClBD,EAAQE,KAAM,MAAO,yDAAyD,GAC9EF,EAAQG,KAAM,MACdgB,EAAaf,KAAKC,MAAML,EAAQM,cAAcuC,SAC9CvB,EAAcqB,KAAKC,KAAKD,KAAKC,KAAK1B,EAAUmB,OAAOjB,KAGvDa,GAAe,IAkCnB,OALAa,qBAAU,WACNV,IAxGmB,WACnB,IAAIpC,EAAU,IAAIC,eAClBD,EAAQE,KAAM,MAAO,mCAAmC,GACxDF,EAAQG,KAAM,MAId,IAFA,IAAI4C,EAAe3C,KAAKC,MAAML,EAAQM,cAAcuC,QAChDG,EAAU,GACLtC,EAAS,EAAGA,EAASqC,EAAaV,OAAQ3B,IAC/CsC,EAAQN,KAAKK,EAAarC,GAAUhC,MAGxCgD,EAAQsB,GA8FRC,KACD,IAGC,sBAAKC,GAAG,OAAR,UACI,qBAAKA,GAAG,YAAYpE,UAAW6C,EAA/B,SACI,qBAAKwB,IAAI,YAAYC,IAAKC,MAG9B,cAACC,EAAA,EAAD,CAAKC,EAAG,EAAGL,GAAG,YAAd,SACgB,KAAXlC,GACD,cAACzC,EAAA,EAAD,CAAMoB,WAAS,EACT6D,UAAU,MACV5D,QAAQ,SACRC,WAAW,aAHjB,SAII,cAAC4D,EAAA,EAAD,CAAYC,YAAa,EACbC,MAAOhB,KAAKC,KAAK1B,EAAUmB,OAASjB,GACpCwC,SAAU,SAACC,EAAOC,GAAUtC,EAAesC,UAI/D,cAACR,EAAA,EAAD,CAAKC,EAAG,EAAGL,GAAG,gBAAd,SACI,cAAC3E,EAAA,EAAD,CAAMoB,WAAS,EACT6D,UAAU,MACV5D,QAAQ,SACRE,QAAS,EACTD,WAAW,aAJjB,SAKKO,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBtB,KAAI,SAACuD,GAAU,OAC7D,cAACxF,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAACmC,EAAA,EAAD,CAAMC,KAAM,SAAUlB,MAAO,YAAamB,MAAOkD,EAAQC,SAAU,YAzGhE,SAACD,GACxB9B,GAAe,GAEf,IAAIgC,EAAkB7D,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBoC,QAAO,SAACC,GAAO,OAAOA,IAAMJ,KACnGlC,aAAaE,QAAQ,eAAgB3B,KAAK4B,UAAUiC,IACpD7B,IAqGwBgC,CAAmBL,eAOvC,cAACT,EAAA,EAAD,CAAKC,EAAG,EAAGL,GAAG,kBAAd,SACgB,KAAXlC,GACD,cAACzC,EAAA,EAAD,CAAMoB,WAAS,EACT6D,UAAU,MACV5D,QAAQ,SACRC,WAAW,aAHjB,SAII,eAACwE,EAAA,EAAD,CAAa3E,MAAM,YAAY,aAAW,kCAA1C,UACI,cAAC4E,EAAA,EAAD,CAAQC,QAAS,WAAKlD,EAAmB,KAAzC,gBACA,cAACiD,EAAA,EAAD,CAAQC,QAAS,WAAKlD,EAAmB,KAAzC,gBACA,cAACiD,EAAA,EAAD,CAAQC,QAAS,WAAKlD,EAAmB,KAAzC,gBACA,cAACiD,EAAA,EAAD,CAAQC,QAAS,WAAKlD,EAAmB,KAAzC,gBACA,cAACiD,EAAA,EAAD,CAAQC,QAAS,WAAKlD,EAAmB,MAAzC,wBAKZ,cAACiC,EAAA,EAAD,CAAKC,EAAG,EAAGL,GAAG,YAAd,SACI,cAAC3E,EAAA,EAAD,CAAMoB,WAAS,EACTG,QAAS,EACTF,QAAQ,eAFd,SAhFe,IAAnBsB,EAAUmB,QAAwE,IAA1DjC,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBO,OAClE,cAACiB,EAAA,EAAD,CAAKC,EAAG,EAAR,SAAW,cAACjE,EAAA,EAAD,CAAYE,QAAQ,KAApB,yBAGd0B,EAAUV,KAAI,SAACnC,EAAMoE,GACjB,GAAa,KAATzB,GACA,GAAIyB,EAAOrB,EAAgBG,GAAekB,EAAOrB,EAAgBG,EAAYH,EAAgB,EACzF,OACI,cAAC,EAAD,CAAU/C,KAAMA,SAIxB,GAAIA,EAAKK,KAAKS,MAAM,EAAE6B,EAAOqB,UAAUrB,EACnC,OACI,cAAC,EAAD,CAAU3C,KAAMA,WAyEpC,eAACiF,EAAA,EAAD,CAAKC,EAAG,EAAGL,GAAG,WAAd,UACI,cAACI,EAAA,EAAD,CAAKC,EAAG,EAAR,SAAW,cAACjE,EAAA,EAAD,CAAYkF,MAAM,SAAShF,QAAS,KAApC,wBACX,cAACjB,EAAA,EAAD,CAAMoB,WAAS,EACT6D,UAAU,MACV5D,QAAQ,SACRE,QAAS,EACTD,WAAW,aAJjB,SAKK4B,EAAKjB,KAAI,SAAC2D,EAAI1B,GAAQ,OACnB,cAAClE,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAACmC,EAAA,EAAD,CAAMC,KAAM,SAAUC,MAAOsD,EAAKI,QAAS,SAACV,GAhK3C,IAACtB,IAiKmBE,EAhKzCR,GAAe,GAET7B,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiB2C,SAAShD,EAAKc,MAC7DnC,KAAKC,MAAMwB,aAAaC,QAAQ,iBAAiBO,OAAO,EACxDR,aAAaE,QAAQ,eAAgB3B,KAAK4B,UAAL,sBAAmB5B,KAAKC,MAAMwB,aAAaC,QAAQ,kBAAnD,CAAqEL,EAAKc,OAE/GV,aAAaE,QAAQ,eAAgB3B,KAAK4B,UAAU,CAACP,EAAKc,MAE9DH,sB,0BCxCNsC,EAAY5G,YAAW,CACzBC,KAAM,CACFC,SAAU,OAsFH2G,MAlFf,WACoBD,IAAhB,IACKE,EAAeC,cAAfD,YAyEL,OACI,mCAxEe,WACf,IAAI5E,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAO,qCAAuC0E,GAAa,GACxE5E,EAAQG,KAAK,MAEb,IAAI9B,EAAO+B,KAAKC,MAAML,EAAQM,cAExBwE,EAAY,CACdC,OAAQ,CACJ1G,EAAK2G,MAAM,GAAGC,KAAKvG,KACnBL,EAAK2G,MAAM,GAAGC,KAAKvG,KACnBL,EAAK2G,MAAM,GAAGC,KAAKvG,KACnBL,EAAK2G,MAAM,GAAGC,KAAKvG,KACnBL,EAAK2G,MAAM,GAAGC,KAAKvG,KACnBL,EAAK2G,MAAM,GAAGC,KAAKvG,MAEvBwG,SAAU,CAAC,CACPrE,MAAOxC,EAAKK,KACZyG,KAAM,CAAC9G,EAAK2G,MAAM,GAAGI,UACjB/G,EAAK2G,MAAM,GAAGI,UACd/G,EAAK2G,MAAM,GAAGI,UACd/G,EAAK2G,MAAM,GAAGI,UACd/G,EAAK2G,MAAM,GAAGI,UACd/G,EAAK2G,MAAM,GAAGI,WAClBC,MAAM,EACNC,gBAAiB,0BACjBC,YAAa,oBACbC,qBAAsB,oBACtBC,iBAAkB,OAClBC,0BAA2B,OAC3BC,sBAAuB,uBAI/B,OACI,eAACpH,EAAA,EAAD,CAAMoB,WAAS,EACT6D,UAAU,MACV5D,QAAQ,SAFd,UAGI,cAACrB,EAAA,EAAD,CAAMC,MAAI,EAAV,SAAW,cAAC8E,EAAA,EAAD,CAAKsC,EAAG,EAAG5H,SAAS,QAApB,SAA4B,cAAC6H,EAAA,EAAD,UAAO,cAACvC,EAAA,EAAD,CAAKsC,EAAG,EAAR,SAAW,qBAAKzC,IAAK9E,EAAKK,KAAMT,MAAM,OAAOmF,IAAK,iDAAmD/E,EAAK6E,GAAK,iBAC7J,cAAC3E,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAAC8E,EAAA,EAAD,CAAKsC,EAAG,EAAG5H,SAAS,QAApB,SACI,cAAC6H,EAAA,EAAD,UACI,eAACvC,EAAA,EAAD,CAAKsC,EAAG,EAAR,UACI,cAACtG,EAAA,EAAD,CAAYkF,MAAM,SAAShF,QAAQ,KAAnC,SACKnB,EAAKK,OAEV,uBACA,eAACY,EAAA,EAAD,CAAYE,QAAQ,KAAKE,MAAM,gBAAgBD,UAAU,IAAzD,mBACWpB,EAAKkC,MAAMC,KAAI,SAACC,GAAQ,OAAOA,EAAKA,KAAK/B,KAAO,OACvD,uBAFJ,WAGaL,EAAKF,OACd,uBAJJ,WAKaE,EAAKyH,mBAMlC,cAACvH,EAAA,EAAD,CAAMC,MAAI,EAAV,SACI,cAAC8E,EAAA,EAAD,CAAKsC,EAAG,EAAG5H,SAAS,QAApB,SACI,cAAC6H,EAAA,EAAD,UACI,cAACvC,EAAA,EAAD,CAAKsC,EAAG,EAAR,SACI,cAAC,IAAD,CAAOT,KAAML,EAAWrE,KAAK,yBAWhDsF,MCnFPC,EAA0BlI,aAAW,SAACmI,GAAD,MAAY,CACnDlI,KAAM,CACFmI,SAAU,GAEd9G,MAAM,aACF8G,SAAU,EACVC,QAAS,QACRF,EAAMG,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAGjBnF,OAAO,aACHsF,SAAU,WACVC,aAAcN,EAAMO,MAAMD,aAC1BjB,gBAAiBmB,YAAKR,EAAMS,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACPtB,gBAAiBmB,YAAKR,EAAMS,QAAQC,OAAOC,MAAO,MAEtDC,WAAY,EACZ5I,MAAO,QACNgI,EAAMG,YAAYC,GAAG,MAAQ,CAC1BQ,WAAYZ,EAAMnG,QAAQ,GAC1B7B,MAAO,SAGf6I,WAAY,CACRC,QAASd,EAAMnG,QAAQ,EAAG,GAC1B3B,OAAQ,OACRmI,SAAU,WACVU,cAAe,OACfb,QAAS,OACTtG,WAAY,SACZoH,eAAgB,UAEpBC,UAAW,CACPxH,MAAO,WAEXyH,WAAW,aACPJ,QAASd,EAAMnG,QAAQ,EAAG,EAAG,EAAG,GAEhCsH,YAAY,cAAD,OAAgBnB,EAAMnG,QAAQ,GAA9B,OACXuH,WAAYpB,EAAMqB,YAAYC,OAAO,SACrCtJ,MAAO,QACNgI,EAAMG,YAAYC,GAAG,MAAQ,CAC1BpI,MAAO,OACP,UAAW,CACPA,MAAO,cAgDRuJ,MA1Cf,WACI,IAAMC,EAAwBzB,IAE9B,EAA4B/E,mBAAS,IAArC,mBAAOD,EAAP,KAAe0G,EAAf,KAEA,OACI,mCACI,eAAC,IAAD,WACI,cAACC,EAAA,EAAD,CAAQjI,MAAM,UAAU4G,SAAS,SAASxH,UAAW2I,EAAsB1J,KAA3E,SACI,eAAC6J,EAAA,EAAD,WACI,cAACtI,EAAA,EAAD,CAAYE,QAAQ,KAAKqI,QAAM,EAAC/I,UAAW2I,EAAsBrI,MAAjE,SAAwE,cAAC,IAAD,CAAMX,GAAG,GAAGE,MAAO,CAACC,eAAgB,OAAQc,MAAO,SAAnD,yBACxE,sBAAKZ,UAAW2I,EAAsBzG,OAAtC,UACI,qBAAKlC,UAAW2I,EAAsBX,WAAtC,SACI,cAAC,IAAD,MAEJ,cAACgB,EAAA,EAAD,CACIC,QAAS,CACLhK,KAAM0J,EAAsBP,UAC5Bc,MAAOP,EAAsBN,YAEjCc,YAAY,eACZC,MAAOlH,EACP4C,SAAU,SAACC,GAAS6D,EAAU7D,EAAMsE,OAAOD,kBAO3D,eAAC,IAAD,WACI,cAAC,IAAD,CAAOE,KAAK,wBAAZ,SACI,cAACC,EAAD,MAEJ,cAAC,IAAD,CAAOD,KAAK,IAAZ,SACI,cAAC,EAAD,CAAWpH,OAAQA,eCzF5BsH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1304fc55.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, CardActionArea, CardContent, CardMedia, Chip, Grid, makeStyles, Typography} from \"@material-ui/core\";\nimport {Router, Link} from \"react-router-dom\";\n\nconst useMaterialStylesCard = makeStyles({\n    root: {\n        maxWidth: 345,\n        width: 300\n    },\n    media: {\n        height: 300,\n    },\n});\n\nfunction Pokemone({pkmn}) {\n    const materialClassesCard = useMaterialStylesCard();\n\n    const getTypes = (pkmnName) => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open(\"GET\", 'https://pokeapi.co/api/v2/pokemon/' + pkmnName, false)\n        xmlHttp.send(null)\n\n        let pkmnTypes = JSON.parse(xmlHttp.responseText).types\n        let typesStr = ''\n        typesStr = pkmnTypes.map((type, typeIndx) => {\n            return (<Grid item><Chip size={'small'} color={'primary'} label={type.type.name}/></Grid>)\n        })\n\n        return (\n            typesStr\n        )\n    }\n\n    return(\n        <Grid item>\n            <Link to={'/pokemon/'+pkmn.name} style={{textDecoration: \"none\"}}>\n                <Card className={materialClassesCard.root}>\n                    <CardActionArea>\n                        <CardMedia\n                            className={materialClassesCard.media}\n                            image={\"https://pokeres.bastionbot.org/images/pokemon/\" + pkmn.url.slice(34).slice(0,-1) + \".png\"}\n                            title={pkmn.name}\n                        />\n                        <CardContent>\n                            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                {pkmn.name}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                <Grid container\n                                      justify=\"flex-start\"\n                                      alignItems=\"baseline\"\n                                      spacing={1}>\n                                    Type: {getTypes(pkmn.name)}\n                                </Grid>\n                            </Typography>\n                        </CardContent>\n                    </CardActionArea>\n                </Card>\n            </Link>\n        </Grid>\n    );\n}\n\nexport default Pokemone","export default __webpack_public_path__ + \"static/media/preloader.5d2a87c1.gif\";","import React, {useEffect, useState} from \"react\";\nimport Pokemone from \"./Pokemone\";\nimport {Button, ButtonGroup, Chip, Grid, Typography} from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\nimport {Pagination} from \"@material-ui/lab\";\nimport '../preloader.css';\nimport preloaderImg from '../preloader.gif';\n\nfunction Pokemones({search}) {\n    const [pokemones, setPokemones] = useState([])\n    const [paginationDelta, setPaginationDelta] = useState(10) // Max: 50\n    const [pagination, setPagination] = useState(0)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [tags, setTags] = useState([])\n    const [preloader, setPreloader] = useState('hidden-preloader')\n\n    if (localStorage.getItem('selectedTags')===null) {\n        localStorage.setItem('selectedTags', JSON.stringify([]))\n    }\n\n    // Функція відповідає за стан прелоадера, приймає або 1 або 0\n    const isPreloaderRun = (preloaderRun) => {\n        if (preloaderRun) {\n            setPreloader('show-preloader')\n        } else {\n            setPreloader('hide-preloader')\n            setInterval(()=>{setPreloader('hidden-preloader')}, 990)\n        }\n    }\n\n    // Завантажуємо всі можливі теги\n    const loadAllTagsAPI = () => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/', false )\n        xmlHttp.send( null )\n\n        let typesFromAPI = JSON.parse(xmlHttp.responseText).results\n        let allTags = []\n        for (let typeIndx=0; typeIndx<typesFromAPI.length; typeIndx++) {\n            allTags.push(typesFromAPI[typeIndx].name)\n        }\n\n        setTags(allTags)\n    }\n\n    // Додаємо вибраний тег сховище\n    const addTagToSelected = (tagIndx) => {\n        isPreloaderRun(true)\n\n        if (! JSON.parse(localStorage.getItem('selectedTags')).includes(tags[tagIndx])) {\n            if (JSON.parse(localStorage.getItem('selectedTags')).length>0) {\n                localStorage.setItem('selectedTags', JSON.stringify([...JSON.parse(localStorage.getItem('selectedTags')), tags[tagIndx]]))\n            } else {\n                localStorage.setItem('selectedTags', JSON.stringify([tags[tagIndx]]))\n            }\n            loadPokemonesList()\n        }\n    }\n\n    // Видаляємо вибраний тег з сховища\n    const delTagFromSelected = (tagStr) => {\n        isPreloaderRun(true)\n\n        let newSelectedTags = JSON.parse(localStorage.getItem('selectedTags')).filter((tag)=>{return(tag!==tagStr)})\n        localStorage.setItem('selectedTags', JSON.stringify(newSelectedTags))\n        loadPokemonesList()\n    }\n\n    // Завантажуємо або всіх покемонів, або сортуючи по тегам\n    // Кількість всіх покемонів 1118 штук\n    const loadPokemonesList = () => {\n        let selectedTagsFromCookies = localStorage.getItem('selectedTags')\n\n        if (selectedTagsFromCookies===null) {\n            localStorage.setItem('selectedTags', JSON.stringify([]))\n        }\n\n        if (JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            let filteredPokemonesByTags = []\n\n            for (let tagIndx=0; tagIndx<JSON.parse(localStorage.getItem('selectedTags')).length; tagIndx++) {\n                let xmlHttp = new XMLHttpRequest()\n                xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/' + JSON.parse(localStorage.getItem('selectedTags'))[tagIndx], false )\n                xmlHttp.send( null )\n                let typePokemones = JSON.parse(xmlHttp.responseText).pokemon\n\n                typePokemones.map((pokemon, indx)=>{\n                    if (pokemon in filteredPokemonesByTags) {\n\n                    } else {\n                        filteredPokemonesByTags.push(pokemon.pokemon)\n                    }\n                })\n            }\n\n            setPokemones(filteredPokemonesByTags)\n            setPagination(Math.ceil(filteredPokemonesByTags.length/paginationDelta))\n        } else {\n            let xmlHttp = new XMLHttpRequest()\n            xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon?limit=1118&offset=0', false ) // Обовязково синхронно\n            xmlHttp.send( null )\n            setPokemones(JSON.parse(xmlHttp.responseText).results)\n            setPagination(Math.ceil(Math.ceil(pokemones.length/paginationDelta)))\n        }\n\n        isPreloaderRun(false)\n    }\n\n    // Формуємо список покемонів\n    const formatPokemonesJSX = () => {\n        if (pokemones.length===0 && JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            return(<Box m={4}><Typography variant='h3'>Not Found</Typography></Box>)\n        } else {\n            return(\n                pokemones.map((pkmn, indx)=>{\n                    if (search===''){\n                        if (indx < paginationDelta*currentPage && indx > paginationDelta*currentPage-paginationDelta-1) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    } else {\n                        if (pkmn.name.slice(0,search.length)===search) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    }\n                })\n            )\n        }\n    }\n\n    // Запускається один раз при першому завантаженні\n    useEffect(()=>{\n        loadPokemonesList()\n        loadAllTagsAPI()\n    }, [])\n\n    return(\n        <div id=\"body\">\n            <div id=\"preloader\" className={preloader}>\n                <img alt=\"preloader\" src={preloaderImg}/>\n            </div>\n\n            <Box m={3} id=\"paginator\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <Pagination defaultPage={1}\n                                count={Math.ceil(pokemones.length / paginationDelta)}\n                                onChange={(event, page) => {setCurrentPage(page)}}/>\n                </Grid>}\n            </Box>\n\n            <Box m={2} id=\"selected-tags\">\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      spacing={2}\n                      alignItems=\"flex-start\">\n                    {JSON.parse(localStorage.getItem('selectedTags')).map((tagStr)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} color={'secondary'} label={tagStr} onDelete={()=>{\n                                delTagFromSelected(tagStr)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"paginator-delta\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <ButtonGroup color=\"secondary\" aria-label=\"outlined secondary button group\">\n                        <Button onClick={()=>{setPaginationDelta(10)}}>10</Button>\n                        <Button onClick={()=>{setPaginationDelta(20)}}>20</Button>\n                        <Button onClick={()=>{setPaginationDelta(30)}}>30</Button>\n                        <Button onClick={()=>{setPaginationDelta(50)}}>50</Button>\n                        <Button onClick={()=>{setPaginationDelta(100)}}>100</Button>\n                    </ButtonGroup>\n                </Grid>}\n            </Box>\n\n            <Box m={3} id=\"pokemones\">\n                <Grid container\n                      spacing={2}\n                      justify=\"space-evenly\">\n                    {formatPokemonesJSX()}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"all-tags\">\n                <Box m={3}><Typography align=\"center\" variant={'h4'}>All tags</Typography></Box>\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      spacing={3}\n                      alignItems=\"flex-start\">\n                    {tags.map((tag,indx)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} label={tag} onClick={(event)=>{\n                                addTagToSelected(indx)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n        </div>\n    )\n}\n\nexport default Pokemones","import React from \"react\";\nimport {\n    Box,\n    Card,\n    CardActionArea,\n    CardContent,\n    CardMedia,\n    Grid,\n    makeStyles,\n    Paper,\n    Typography\n} from \"@material-ui/core\";\nimport {useParams} from \"react-router-dom\";\nimport {Radar} from \"react-chartjs-2\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 400\n    },\n});\n\nfunction PokemonesInfo() {\n    const classes = useStyles()\n    let {pokemonName} = useParams()\n\n    const getPokemon = () => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open(\"GET\", 'https://pokeapi.co/api/v2/pokemon/' + pokemonName, false)\n        xmlHttp.send(null)\n\n        let pkmn = JSON.parse(xmlHttp.responseText)\n\n        const chartData = {\n            labels: [\n                pkmn.stats[0].stat.name,\n                pkmn.stats[1].stat.name,\n                pkmn.stats[2].stat.name,\n                pkmn.stats[3].stat.name,\n                pkmn.stats[4].stat.name,\n                pkmn.stats[5].stat.name\n            ],\n            datasets: [{\n                label: pkmn.name,\n                data: [pkmn.stats[0].base_stat,\n                    pkmn.stats[1].base_stat,\n                    pkmn.stats[2].base_stat,\n                    pkmn.stats[3].base_stat,\n                    pkmn.stats[4].base_stat,\n                    pkmn.stats[5].base_stat],\n                fill: true,\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgb(255, 99, 132)',\n                pointBackgroundColor: 'rgb(255, 99, 132)',\n                pointBorderColor: '#fff',\n                pointHoverBackgroundColor: '#fff',\n                pointHoverBorderColor: 'rgb(255, 99, 132)'\n            }]\n        }\n\n        return(\n            <Grid container\n                  direction='row'\n                  justify='center'>\n                <Grid item><Box p={4} maxWidth='400px'><Paper><Box p={3}><img alt={pkmn.name} width='100%' src={\"https://pokeres.bastionbot.org/images/pokemon/\" + pkmn.id + \".png\"}/></Box></Paper></Box></Grid>\n                <Grid item>\n                    <Box p={4} maxWidth='400px'>\n                        <Paper>\n                            <Box p={3}>\n                                <Typography align=\"center\" variant=\"h4\">\n                                    {pkmn.name}\n                                </Typography>\n                                <br/>\n                                <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\n                                    Type: {pkmn.types.map((type)=>{return(type.type.name + ' ')})}\n                                    <br/>\n                                    Height: {pkmn.height}\n                                    <br/>\n                                    Weight: {pkmn.weight}\n                                </Typography>\n                            </Box>\n                        </Paper>\n                    </Box>\n                </Grid>\n                <Grid item>\n                    <Box p={4} maxWidth='400px'>\n                        <Paper>\n                            <Box p={0}>\n                                <Radar data={chartData} type=\"undefined\"/>\n                            </Box>\n                        </Paper>\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    }\n\n    return(\n        <>\n            {getPokemon()}\n        </>\n    )\n}\n\nexport default PokemonesInfo","import './App.css';\nimport './preloader.css';\nimport {AppBar, fade, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pokemones from \"./Pokemones/Pokemones\";\nimport {useState} from \"react\";\nimport PokemoneInfo from \"./PokemoneInfo/PokemoneInfo\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nconst useMaterialStylesAppBar = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nfunction App() {\n    const materialClassesAppBar = useMaterialStylesAppBar();\n\n    const [search, setSearch] = useState('')\n\n    return (\n        <>\n            <Router>\n                <AppBar color=\"primary\" position=\"static\" className={materialClassesAppBar.root}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" noWrap className={materialClassesAppBar.title}><Link to='' style={{textDecoration: \"none\", color: \"white\"}}>pokemonex</Link></Typography>\n                        <div className={materialClassesAppBar.search}>\n                            <div className={materialClassesAppBar.searchIcon}>\n                                <SearchIcon />\n                            </div>\n                            <InputBase\n                                classes={{\n                                    root: materialClassesAppBar.inputRoot,\n                                    input: materialClassesAppBar.inputInput\n                                }}\n                                placeholder=\"Search…\"\n                                value={search}\n                                onChange={(event)=>{setSearch(event.target.value)}}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n\n\n                <Switch>\n                    <Route path='/pokemon/:pokemonName'>\n                        <PokemoneInfo/>\n                    </Route>\n                    <Route path='/'>\n                        <Pokemones search={search}/>\n                    </Route>\n                </Switch>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
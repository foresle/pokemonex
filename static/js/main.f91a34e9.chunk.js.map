{"version":3,"sources":["Pokemones/Pokemone.js","Pokemones/Pokemones.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","width","media","height","Pokemone","pkmn","classes","Grid","item","Card","className","CardActionArea","CardMedia","image","url","slice","title","name","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","theme","marginBottom","padding","filter_bar","margin","not_found","typography","button","backgroundColor","palette","background","paper","spacing","Pokemones","search","useState","pokemones","setPokemones","paginationDelta","setPaginationDelta","setPagination","currentPage","setCurrentPage","useEffect","xmlHttp","XMLHttpRequest","open","send","JSON","parse","responseText","results","Math","ceil","length","container","justify","xs","Pagination","defaultPage","count","onChange","event","page","Radio","checked","target","value","label","map","indx","flexGrow","AppBar","common","black","menuButton","marginRight","display","breakpoints","up","position","borderRadius","shape","fade","white","marginLeft","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","App","setSearch","Toolbar","noWrap","InputBase","placeholder","input","inputProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f91a34e9.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    CardMedia, Grid,\n    makeStyles,\n    Typography\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        width: 300\n    },\n    media: {\n        height: 300,\n    },\n});\n\nfunction Pokemone({pkmn}) {\n    const classes = useStyles();\n\n    return(\n        <Grid item>\n            <Card className={classes.root}>\n                <CardActionArea>\n                    <CardMedia\n                        className={classes.media}\n                        image={\"https://pokeres.bastionbot.org/images/pokemon/\" + pkmn.url.slice(34).slice(0,-1) + \".png\"}\n                        title={pkmn.name}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {pkmn.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Type:\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                        Share\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Learn More\n                    </Button>\n                </CardActions>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default Pokemone","import React, {useEffect, useState} from \"react\";\nimport Pokemone from \"./Pokemone\";\nimport {Container, Grid, makeStyles, Radio} from \"@material-ui/core\";\nimport {Pagination} from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme)=>({\n    root: {\n        marginBottom: '2rem',\n        padding: '0 1rem'\n    },\n    filter_bar: {\n        margin: '2rem 0'\n    },\n    not_found: {\n        ...theme.typography.button,\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(1)\n    }\n}));\n\nfunction Pokemones({search}) {\n    const classes = useStyles();\n\n    const [pokemones, setPokemones] = useState([])\n    const [paginationDelta, setPaginationDelta] = useState(20) // Max: 50\n    const [pagination, setPagination] = useState(0)\n    const [currentPage, setCurrentPage] = useState(1)\n\n    useEffect(()=>{\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon?limit=1118&offset=0', false ) // Max pokemones is 1118\n        xmlHttp.send( null )\n        setPokemones(JSON.parse(xmlHttp.responseText).results)\n        setPagination(Math.ceil(JSON.parse(xmlHttp.responseText).results.length/paginationDelta))\n    }, [])\n\n\n    return(\n        <>\n            <Grid container justify={\"space-evenly\"} xs={12} className={classes.filter_bar}>\n                <Grid item>\n                    {search === '' && <Pagination defaultPage={1}\n                                                  count={Math.ceil(pokemones.length / paginationDelta)}\n                                                  onChange={(event, page) => {\n                                                      setCurrentPage(page)\n                                                  }}/>}\n                </Grid>\n                <Grid item>\n                    <Radio\n                        checked={paginationDelta == 10}\n                        onChange={(event)=>{setPaginationDelta(event.target.value)}}\n                        value={10}\n                        label=\"Bottom\"\n                    />\n                    <Radio\n                        checked={paginationDelta == 20}\n                        onChange={(event)=>{setPaginationDelta(event.target.value)}}\n                        value={20}\n                    />\n                    <Radio\n                        checked={paginationDelta == 50}\n                        onChange={(event)=>{setPaginationDelta(event.target.value)}}\n                        value={50}\n                    />\n                </Grid>\n            </Grid>\n            <Grid container spacing={2} justify=\"space-evenly\" xs={12} className={classes.root}>\n                {pokemones.map((pkmn, indx)=>{\n                    if (search===''){\n                        if (indx < paginationDelta*currentPage && indx > paginationDelta*currentPage-paginationDelta-1) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    } else {\n                        if (pkmn.name.slice(0,search.length)===search) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    }\n                })}\n            </Grid>\n        </>\n    )\n}\n\nexport default Pokemones","import './App.css';\nimport {AppBar, fade, IconButton, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pokemones from \"./Pokemones/Pokemones\";\nimport {useEffect, useState} from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    AppBar: {\n        backgroundColor: theme.palette.common.black\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [search, setSearch] = useState('')\n\n\n    return (\n      <>\n          <div className={classes.root}>\n              <AppBar position=\"static\" className={classes.AppBar}>\n                  <Toolbar>\n                      {/*<IconButton*/}\n                      {/*    edge=\"start\"*/}\n                      {/*    className={classes.menuButton}*/}\n                      {/*    color=\"inherit\"*/}\n                      {/*    aria-label=\"open drawer\"*/}\n                      {/*>*/}\n                      {/*    <MenuIcon />*/}\n                      {/*</IconButton>*/}\n                      <Typography className={classes.title} variant=\"h6\" noWrap>\n                          pokemonex\n                      </Typography>\n                      <div className={classes.search}>\n                          <div className={classes.searchIcon}>\n                              <SearchIcon />\n                          </div>\n                          <InputBase\n                              placeholder=\"Search…\"\n                              classes={{\n                                  root: classes.inputRoot,\n                                  input: classes.inputInput,\n                              }}\n                              inputProps={{ 'aria-label': 'search' }}\n                              value={search}\n                              onChange={(event)=>{setSearch(event.target.value)}}\n                          />\n                      </div>\n                  </Toolbar>\n              </AppBar>\n          </div>\n          <Pokemones search={search}/>\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
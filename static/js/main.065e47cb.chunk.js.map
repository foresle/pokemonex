{"version":3,"sources":["preloader.gif","Pokemones/Pokemone.js","Pokemones/Pokemones.js","App.js","reportWebVitals.js","index.js"],"names":["useMaterialStylesCard","makeStyles","root","maxWidth","width","media","height","Pokemone","pkmn","materialClassesCard","Grid","item","Card","className","CardActionArea","CardMedia","image","url","slice","title","name","CardContent","Typography","gutterBottom","variant","component","color","pkmnName","xmlHttp","XMLHttpRequest","open","send","pkmnTypes","JSON","parse","responseText","types","typesStr","map","type","typeIndx","getTypes","Pokemones","search","useState","pokemones","setPokemones","paginationDelta","setPaginationDelta","setPagination","currentPage","setCurrentPage","tags","setTags","preloader","setPreloader","localStorage","getItem","setItem","stringify","isPreloaderRun","preloaderRun","setInterval","loadPokemonesList","length","filteredPokemonesByTags","tagIndx","pokemon","indx","push","Math","ceil","results","useEffect","typesFromAPI","allTags","loadAllTagsAPI","id","alt","src","preloaderImg","Box","m","container","direction","justify","alignItems","Pagination","defaultPage","count","onChange","event","page","spacing","tagStr","Chip","size","label","onDelete","newSelectedTags","filter","tag","delTagFromSelected","ButtonGroup","Button","onClick","includes","useMaterialStylesAppBar","theme","flexGrow","display","breakpoints","up","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","searchIcon","padding","pointerEvents","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","App","materialClassesAppBar","setSearch","AppBar","Toolbar","noWrap","InputBase","classes","input","placeholder","value","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.065e47cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.5d2a87c1.gif\";","import React from \"react\";\nimport {Card, CardActionArea, CardContent, CardMedia, Grid, makeStyles, Typography} from \"@material-ui/core\";\n\nconst useMaterialStylesCard = makeStyles({\n    root: {\n        maxWidth: 345,\n        width: 300\n    },\n    media: {\n        height: 300,\n    },\n});\n\nfunction Pokemone({pkmn}) {\n    const materialClassesCard = useMaterialStylesCard();\n\n    const getTypes = (pkmnName) => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon/' + pkmnName, false )\n        xmlHttp.send( null )\n\n        let pkmnTypes = JSON.parse(xmlHttp.responseText).types\n        let typesStr = ''\n        pkmnTypes.map((type, typeIndx)=>{\n            typesStr = typesStr + type.type.name + ' '\n        })\n\n        return typesStr\n    }\n\n    return(\n        <Grid item>\n            <Card className={materialClassesCard.root}>\n                <CardActionArea>\n                    <CardMedia\n                        className={materialClassesCard.media}\n                        image={\"https://pokeres.bastionbot.org/images/pokemon/\" + pkmn.url.slice(34).slice(0,-1) + \".png\"}\n                        title={pkmn.name}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {pkmn.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Type: {getTypes(pkmn.name)}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default Pokemone","import React, {useEffect, useState} from \"react\";\nimport Pokemone from \"./Pokemone\";\nimport {Button, ButtonGroup, Chip, Grid, Typography} from \"@material-ui/core\";\nimport Box from '@material-ui/core/Box';\nimport {Pagination} from \"@material-ui/lab\";\nimport '../preloader.css';\nimport preloaderImg from '../preloader.gif';\n\nfunction Pokemones({search}) {\n    const [pokemones, setPokemones] = useState([])\n    const [paginationDelta, setPaginationDelta] = useState(10) // Max: 50\n    const [pagination, setPagination] = useState(0)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [tags, setTags] = useState([])\n    const [preloader, setPreloader] = useState('hidden-preloader')\n\n    if (localStorage.getItem('selectedTags')===null) {\n        localStorage.setItem('selectedTags', JSON.stringify([]))\n    }\n\n    // Функція відповідає за стан прелоадера, приймає або 1 або 0\n    const isPreloaderRun = (preloaderRun) => {\n        if (preloaderRun) {\n            setPreloader('show-preloader')\n        } else {\n            setPreloader('hide-preloader')\n            setInterval(()=>{setPreloader('hidden-preloader')}, 990)\n        }\n    }\n\n    // Завантажуємо всі можливі теги\n    const loadAllTagsAPI = () => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/', false )\n        xmlHttp.send( null )\n\n        let typesFromAPI = JSON.parse(xmlHttp.responseText).results\n        let allTags = []\n        for (let typeIndx=0; typeIndx<typesFromAPI.length; typeIndx++) {\n            allTags.push(typesFromAPI[typeIndx].name)\n        }\n\n        setTags(allTags)\n    }\n\n    // Додаємо вибраний тег сховище\n    const addTagToSelected = (tagIndx) => {\n        isPreloaderRun(true)\n\n        if (! JSON.parse(localStorage.getItem('selectedTags')).includes(tags[tagIndx])) {\n            if (JSON.parse(localStorage.getItem('selectedTags')).length>0) {\n                localStorage.setItem('selectedTags', JSON.stringify([...JSON.parse(localStorage.getItem('selectedTags')), tags[tagIndx]]))\n            } else {\n                localStorage.setItem('selectedTags', JSON.stringify([tags[tagIndx]]))\n            }\n            loadPokemonesList()\n        }\n    }\n\n    // Видаляємо вибраний тег з сховища\n    const delTagFromSelected = (tagStr) => {\n        isPreloaderRun(true)\n\n        let newSelectedTags = JSON.parse(localStorage.getItem('selectedTags')).filter((tag)=>{return(tag!==tagStr)})\n        localStorage.setItem('selectedTags', JSON.stringify(newSelectedTags))\n        loadPokemonesList()\n    }\n\n    // Завантажуємо або всіх покемонів, або сортуючи по тегам\n    // Кількість всіх покемонів 1118 штук\n    const loadPokemonesList = () => {\n        let selectedTagsFromCookies = localStorage.getItem('selectedTags')\n\n        if (selectedTagsFromCookies===null) {\n            localStorage.setItem('selectedTags', JSON.stringify([]))\n        }\n\n        if (JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            let filteredPokemonesByTags = []\n\n            for (let tagIndx=0; tagIndx<JSON.parse(localStorage.getItem('selectedTags')).length; tagIndx++) {\n                let xmlHttp = new XMLHttpRequest()\n                xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/type/' + JSON.parse(localStorage.getItem('selectedTags'))[tagIndx], false )\n                xmlHttp.send( null )\n                let typePokemones = JSON.parse(xmlHttp.responseText).pokemon\n\n                typePokemones.map((pokemon, indx)=>{\n                    if (pokemon in filteredPokemonesByTags) {\n\n                    } else {\n                        filteredPokemonesByTags.push(pokemon.pokemon)\n                    }\n                })\n            }\n\n            setPokemones(filteredPokemonesByTags)\n            setPagination(Math.ceil(filteredPokemonesByTags.length/paginationDelta))\n        } else {\n            let xmlHttp = new XMLHttpRequest()\n            xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon?limit=1118&offset=0', false ) // Обовязково синхронно\n            xmlHttp.send( null )\n            setPokemones(JSON.parse(xmlHttp.responseText).results)\n            setPagination(Math.ceil(Math.ceil(pokemones.length/paginationDelta)))\n        }\n\n        isPreloaderRun(false)\n    }\n\n    // Формуємо список покемонів\n    const formatPokemonesJSX = () => {\n        if (pokemones.length===0 && JSON.parse(localStorage.getItem('selectedTags')).length!==0) {\n            return(\n                <Typography variant='h3'>Not Found</Typography>\n            )\n        } else {\n            return(\n                pokemones.map((pkmn, indx)=>{\n                    if (search===''){\n                        if (indx < paginationDelta*currentPage && indx > paginationDelta*currentPage-paginationDelta-1) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    } else {\n                        if (pkmn.name.slice(0,search.length)===search) {\n                            return(\n                                <Pokemone pkmn={pkmn}/>\n                            )\n                        }\n                    }\n                })\n            )\n        }\n    }\n\n    // Запускається один раз при першому завантаженні\n    useEffect(()=>{\n        loadPokemonesList()\n        loadAllTagsAPI()\n    }, [])\n\n    return(\n        <div id=\"body\">\n            <div id=\"preloader\" className={preloader}>\n                <img alt=\"preloader\" src={preloaderImg}/>\n            </div>\n\n            <Box m={3} id=\"paginator\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <Pagination defaultPage={1}\n                                count={Math.ceil(pokemones.length / paginationDelta)}\n                                onChange={(event, page) => {setCurrentPage(page)}}/>\n                </Grid>}\n            </Box>\n\n            <Box m={2} id=\"selected-tags\">\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      spacing={2}\n                      alignItems=\"flex-start\">\n                    {JSON.parse(localStorage.getItem('selectedTags')).map((tagStr)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} color={'secondary'} label={tagStr} onDelete={()=>{\n                                delTagFromSelected(tagStr)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"paginator-delta\">\n                {search === '' &&\n                <Grid container\n                      direction=\"row\"\n                      justify=\"center\"\n                      alignItems=\"flex-start\">\n                    <ButtonGroup color=\"secondary\" aria-label=\"outlined secondary button group\">\n                        <Button onClick={()=>{setPaginationDelta(10)}}>10</Button>\n                        <Button onClick={()=>{setPaginationDelta(20)}}>20</Button>\n                        <Button onClick={()=>{setPaginationDelta(30)}}>30</Button>\n                        <Button onClick={()=>{setPaginationDelta(50)}}>50</Button>\n                        <Button onClick={()=>{setPaginationDelta(100)}}>100</Button>\n                    </ButtonGroup>\n                </Grid>}\n            </Box>\n\n            <Box m={3} id=\"pokemones\">\n                <Grid container\n                      spacing={2}\n                      justify=\"space-evenly\">\n                    {formatPokemonesJSX()}\n                </Grid>\n            </Box>\n\n            <Box m={3} id=\"all-tags\">\n                <Box m={1}><Typography variant={'h4'}>All tags</Typography></Box>\n                <Grid container\n                      direction=\"row\"\n                      justify=\"flex-start\"\n                      spacing={2}\n                      alignItems=\"flex-start\">\n                    {tags.map((tag,indx)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} label={tag} onClick={(event)=>{\n                                addTagToSelected(indx)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n            </Box>\n        </div>\n    )\n}\n\nexport default Pokemones","import './App.css';\nimport './preloader.css';\nimport preloaderImg from './preloader.gif';\nimport {AppBar, fade, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pokemones from \"./Pokemones/Pokemones\";\nimport {useState} from \"react\";\n\nconst useMaterialStylesAppBar = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nfunction App() {\n    const materialClassesAppBar = useMaterialStylesAppBar();\n\n    const [search, setSearch] = useState('')\n\n    return (\n        <>\n            <AppBar color=\"primary\" position=\"static\" className={materialClassesAppBar.root}>\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap className={materialClassesAppBar.title}>pokemonex</Typography>\n                    <div className={materialClassesAppBar.search}>\n                        <div className={materialClassesAppBar.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            classes={{\n                                root: materialClassesAppBar.inputRoot,\n                                input: materialClassesAppBar.inputInput\n                            }}\n                            placeholder=\"Search…\"\n                            value={search}\n                            onChange={(event)=>{setSearch(event.target.value)}}\n                        />\n                    </div>\n                </Toolbar>\n            </AppBar>\n\n            <Pokemones search={search}/>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
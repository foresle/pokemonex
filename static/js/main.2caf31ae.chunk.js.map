{"version":3,"sources":["Pokemones/Pokemone.js","Pokemones/Pokemones.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","width","media","height","Pokemone","pkmn","classes","Grid","item","Card","className","CardActionArea","CardMedia","image","url","slice","title","name","CardContent","Typography","gutterBottom","variant","component","color","pkmnName","xmlHttp","XMLHttpRequest","open","send","pkmnTypes","JSON","parse","responseText","types","typesStr","map","type","typeIndx","getTypes","CardActions","Button","size","theme","pokemones","marginBottom","padding","filterBar","margin","pageDelta","paginator","selectedTags","tagsTypography","allTags","Pokemones","search","preloader","useState","setPokemones","filteredPokemonesByTags","setFilteredPokemonesByTags","paginationDelta","setPaginationDelta","setPagination","currentPage","setCurrentPage","tags","setSelectedTags","useEffect","results","Math","ceil","length","pkmnIndx","tagIndx","container","justify","xs","spacing","tagStr","indx","Chip","label","onDelete","event","newSelectedTags","tag","push","delTagFromSelected","Pagination","defaultPage","count","onChange","page","ButtonGroup","onClick","includes","flexGrow","AppBar","backgroundColor","palette","common","black","menuButton","marginRight","display","breakpoints","up","position","borderRadius","shape","fade","white","marginLeft","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","top","left","visibility","App","setSearch","Toolbar","noWrap","InputBase","placeholder","input","inputProps","value","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2caf31ae.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n    Button,\n    Card,\n    CardActionArea,\n    CardActions,\n    CardContent,\n    CardMedia, Grid,\n    makeStyles,\n    Typography\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        width: 300\n    },\n    media: {\n        height: 300,\n    },\n});\n\nfunction Pokemone({pkmn}) {\n    const classes = useStyles();\n\n    const getTypes = (pkmnName) => {\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon/' + pkmnName, false )\n        xmlHttp.send( null )\n\n        let pkmnTypes = JSON.parse(xmlHttp.responseText).types\n        let typesStr = ''\n        pkmnTypes.map((type, typeIndx)=>{\n            typesStr = typesStr + type.type.name + ' '\n        })\n\n        return typesStr\n    }\n\n    return(\n        <Grid item>\n            <Card className={classes.root}>\n                <CardActionArea>\n                    <CardMedia\n                        className={classes.media}\n                        image={\"https://pokeres.bastionbot.org/images/pokemon/\" + pkmn.url.slice(34).slice(0,-1) + \".png\"}\n                        title={pkmn.name}\n                    />\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {pkmn.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                            Type: {getTypes(pkmn.name)}\n                        </Typography>\n                    </CardContent>\n                </CardActionArea>\n                <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                        Share\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                        Learn More\n                    </Button>\n                </CardActions>\n            </Card>\n        </Grid>\n    );\n}\n\nexport default Pokemone","import React, {useEffect, useState} from \"react\";\nimport Pokemone from \"./Pokemone\";\nimport {Button, ButtonGroup, Chip, Container, Grid, makeStyles, Radio, Typography} from \"@material-ui/core\";\nimport {Pagination} from \"@material-ui/lab\";\n\nconst useStyles = makeStyles((theme)=>({\n    pokemones: {\n        marginBottom: '2rem',\n        padding: '0 1rem'\n    },\n    filterBar: {\n        margin: '2rem 0'\n    },\n    pageDelta: {\n        margin: \"2rem 0\"\n    },\n    paginator: {\n        margin: \"2rem 0\"\n    },\n    selectedTags: {\n        margin: \"2rem 0\"\n    },\n    tagsTypography: {\n        margin: \"2rem 4rem\",\n    },\n    allTags: {\n        margin: \"0 4rem\",\n        marginBottom: \"2rem\"\n    }\n}));\n\nfunction Pokemones({search, preloader}) {\n    const classes = useStyles();\n\n    const [pokemones, setPokemones] = useState([])\n    const [filteredPokemonesByTags, setFilteredPokemonesByTags] = useState([])\n    const [paginationDelta, setPaginationDelta] = useState(10) // Max: 50\n    const [pagination, setPagination] = useState(0)\n    const [currentPage, setCurrentPage] = useState(1)\n    const [tags, setTags] = useState(['grass', 'electric', 'fire', 'ground', 'rock'])\n    const [selectedTags, setSelectedTags] = useState([])\n\n    const addTagToSelected = (tagIndx) => {\n        if (! selectedTags.includes(tags[tagIndx])) {\n            setSelectedTags([...selectedTags, tags[tagIndx]])\n        }\n    }\n\n    const delTagFromSelected = (tagStr) => {\n        let newSelectedTags = []\n        selectedTags.map((tag, indx)=>{\n            if (tag !== tagStr) {\n                newSelectedTags.push(tag)\n            }\n        })\n        setSelectedTags(newSelectedTags)\n    }\n\n    useEffect(()=>{\n        let xmlHttp = new XMLHttpRequest()\n        xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon?limit=1118&offset=0', false ) // Max pokemones is 1118\n        xmlHttp.send( null )\n        setPokemones(JSON.parse(xmlHttp.responseText).results)\n        setPagination(Math.ceil(JSON.parse(xmlHttp.responseText).results.length/paginationDelta))\n    }, [])\n\n    if (selectedTags.length!==0) {\n\n        pokemones.map((pkmn,pkmnIndx)=>{\n            if (pkmnIndx in filteredPokemonesByTags) {\n\n            } else {\n                let xmlHttp = new XMLHttpRequest()\n                xmlHttp.open( \"GET\", 'https://pokeapi.co/api/v2/pokemon/'+pkmn.name, false )\n                xmlHttp.send( null )\n                let pkmnTypes = JSON.parse(xmlHttp.responseText).types\n                pkmnTypes.map((type, typeIndx)=>{\n                    for (let tagIndx=0; tagIndx<selectedTags.length; tagIndx++) {\n                        if (type.type.name===selectedTags[tagIndx]) {\n                            setFilteredPokemonesByTags([...filteredPokemonesByTags, pkmnIndx])\n                            break\n                        }\n                    }\n                })\n            }\n        })\n    }\n\n    if (filteredPokemonesByTags.length!==0) {\n        setPagination(Math.ceil(filteredPokemonesByTags.length/paginationDelta))\n    }\n\n\n    return(\n        <>\n            <Grid container justify={\"space-evenly\"} xs={12} className={classes.filterBar}>\n                <Grid container justify={\"center\"} className={classes.selectedTags} spacing={1}>\n                    {selectedTags.map((tagStr, indx)=>{return(\n                        <Grid item>\n                            <Chip size={'medium'} color={'secondary'} label={tagStr} onDelete={(event)=>{\n                                delTagFromSelected(tagStr)\n                            }}/>\n                        </Grid>\n                    )})}\n                </Grid>\n                <Grid item>\n                    {search === '' && <Pagination className={classes.paginator}\n                                                  defaultPage={1}\n                                                  count={Math.ceil(pokemones.length / paginationDelta)}\n                                                  onChange={(event, page) => {\n                                                      setCurrentPage(page)\n                                                  }}/>}\n                </Grid>\n                {search === '' && <Grid item className={classes.pageDelta}>\n                    <ButtonGroup color=\"secondary\" aria-label=\"outlined secondary button group\">\n                        <Button onClick={(event)=>{setPaginationDelta(10)}}>10</Button>\n                        <Button onClick={(event)=>{setPaginationDelta(20)}}>20</Button>\n                        <Button onClick={(event)=>{setPaginationDelta(30)}}>30</Button>\n                        <Button onClick={(event)=>{setPaginationDelta(50)}}>50</Button>\n                        <Button onClick={(event)=>{setPaginationDelta(100)}}>100</Button>\n                    </ButtonGroup>\n                </Grid>}\n            </Grid>\n            <Grid container spacing={2} justify=\"space-evenly\" xs={12} className={classes.pokemones}>\n                {pokemones.map((pkmn, indx)=>{\n                    if (filteredPokemonesByTags.length!==0) {\n\n                    } else {\n                        if (search===''){\n                            if (indx < paginationDelta*currentPage && indx > paginationDelta*currentPage-paginationDelta-1) {\n                                return(\n                                    <Pokemone pkmn={pkmn}/>\n                                )\n                            }\n                        } else {\n                            if (pkmn.name.slice(0,search.length)===search) {\n                                return(\n                                    <Pokemone pkmn={pkmn}/>\n                                )\n                            }\n                        }\n                    }\n                })}\n            </Grid>\n            <Typography className={classes.tagsTypography} variant={'h4'}>All tags</Typography>\n            <Grid container className={classes.allTags} xs={6} spacing={'1'}>\n                {tags.map((tag,indx)=>{return(\n                    <Grid item>\n                        <Chip size={'medium'} label={tag} onClick={(event)=>{\n                            addTagToSelected(indx)\n                        }}/>\n                    </Grid>\n                )})}\n            </Grid>\n        </>\n    )\n}\n\nexport default Pokemones","import './App.css';\nimport {AppBar, fade, IconButton, makeStyles, Toolbar, Typography} from \"@material-ui/core\";\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Pokemones from \"./Pokemones/Pokemones\";\nimport {useEffect, useState} from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    AppBar: {\n        backgroundColor: theme.palette.common.black\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n    preloader: {\n        width: '100vw',\n        height: '100vh',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        backgroundColor: 'rgba(184,20,20,0.59)',\n        visibility: 'none'\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [search, setSearch] = useState('')\n\n\n    return (\n      <>\n          {/*<div className={classes.preloader}></div>*/}\n          <div className={classes.root}>\n              <AppBar position=\"static\" className={classes.AppBar}>\n                  <Toolbar>\n                      {/*<IconButton*/}\n                      {/*    edge=\"start\"*/}\n                      {/*    className={classes.menuButton}*/}\n                      {/*    color=\"inherit\"*/}\n                      {/*    aria-label=\"open drawer\"*/}\n                      {/*>*/}\n                      {/*    <MenuIcon />*/}\n                      {/*</IconButton>*/}\n                      <Typography className={classes.title} variant=\"h6\" noWrap>\n                          pokemonex\n                      </Typography>\n                      <div className={classes.search}>\n                          <div className={classes.searchIcon}>\n                              <SearchIcon />\n                          </div>\n                          <InputBase\n                              placeholder=\"Search…\"\n                              classes={{\n                                  root: classes.inputRoot,\n                                  input: classes.inputInput,\n                              }}\n                              inputProps={{ 'aria-label': 'search' }}\n                              value={search}\n                              onChange={(event)=>{setSearch(event.target.value)}}\n                          />\n                      </div>\n                  </Toolbar>\n              </AppBar>\n          </div>\n          <Pokemones preloader={classes.preloader} search={search}/>\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}